{"version":3,"sources":["serviceWorker.js","routes/index.jsx","views/Home.jsx","views/Contact.jsx","views/AboutUs.jsx","components/Header.jsx","layout/LandingPage.jsx","index.js"],"names":["Boolean","window","location","hostname","match","indexRoutes","path","name","component","state","react_default","a","createElement","Component","redirect","pathTo","Header","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","toggle","bind","assertThisInitialized","isOpen","setState","Navbar","color","light","expand","NavbarBrand","href","NavbarToggler","onClick","Collapse","navbar","Nav","className","NavItem","react_router_dom","to","LandingPage","components_Header","react_router","map","prop","key","from","hist","createBrowserHistory","ReactDOM","render","history","layout_LandingPage","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"oMAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,6HCFSC,EAZG,CAChB,CAAEC,KAAM,QAASC,KAAM,UAAWC,qNCFlCC,MAAQ,2EAGN,OAAOC,EAAAC,EAAAC,cAAA,iCAJQC,cDIjB,CAAEP,KAAM,WAAYC,KAAM,UAAWC,qNEHrCC,MAAQ,2EAGN,OAAOC,EAAAC,EAAAC,cAAA,6BAJWC,cFKpB,CAAEP,KAAM,YAAaC,KAAM,WAAYC,qNGJvCC,MAAQ,2EAGN,OAAOC,EAAAC,EAAAC,cAAA,8BAJWC,cHMpB,CACEC,UAAU,EACVR,KAAM,IACNS,OAAQ,QACRR,KAAM,4EI4CKS,cA5Cb,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KAEDQ,OAASP,EAAKO,OAAOC,KAAZP,OAAAQ,EAAA,EAAAR,QAAAQ,EAAA,EAAAR,CAAAD,KACdA,EAAKT,MAAQ,CACXmB,QAAQ,GALOV,wEASjBG,KAAKQ,SAAS,CACZD,QAASP,KAAKZ,MAAMmB,0CAItB,OACElB,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACkB,EAAA,EAAD,CAAQC,MAAM,QAAQC,OAAK,EAACC,OAAO,MACjCvB,EAAAC,EAAAC,cAACsB,EAAA,EAAD,CAAaC,KAAK,KAAlB,cACAzB,EAAAC,EAAAC,cAACwB,EAAA,EAAD,CAAeC,QAAShB,KAAKI,SAC7Bf,EAAAC,EAAAC,cAAC0B,EAAA,EAAD,CAAUV,OAAQP,KAAKZ,MAAMmB,OAAQW,QAAM,GACzC7B,EAAAC,EAAAC,cAAC4B,EAAA,EAAD,CAAKC,UAAU,UAAUF,QAAM,GAC7B7B,EAAAC,EAAAC,cAAC8B,EAAA,EAAD,KACEhC,EAAAC,EAAAC,cAAC+B,EAAA,EAAD,CAASF,UAAU,WAAWG,GAAG,SAAjC,YAIFlC,EAAAC,EAAAC,cAAC8B,EAAA,EAAD,KACEhC,EAAAC,EAAAC,cAAC+B,EAAA,EAAD,CAASF,UAAU,WAAWG,GAAG,YAAjC,YAIFlC,EAAAC,EAAAC,cAAC8B,EAAA,EAAD,KACEhC,EAAAC,EAAAC,cAAC+B,EAAA,EAAD,CAASF,UAAU,WAAWG,GAAG,aAAjC,wBAjCK/B,aCeNgC,6MApBbpC,MAAQ,2EAGN,OACEC,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACkC,EAAD,MACApC,EAAAC,EAAAC,cAACmC,EAAA,EAAD,KACG1C,EAAY2C,IAAI,SAACC,EAAMC,GACtB,OAAID,EAAKnC,SACAJ,EAAAC,EAAAC,cAACmC,EAAA,EAAD,CAAUI,KAAMF,EAAK3C,KAAMsC,GAAIK,EAAKlC,OAAQmC,IAAKA,IAExDxC,EAAAC,EAAAC,cAACmC,EAAA,EAAD,CAAOzC,KAAM2C,EAAK3C,KAAME,UAAWyC,EAAKzC,UAAW0C,IAAKA,eAZ5CrC,aCIpBuC,EAAOC,cAEbC,IAASC,OACP7C,EAAAC,EAAAC,cAACmC,EAAA,EAAD,CAAQS,QAASJ,GACf1C,EAAAC,EAAAC,cAAC6C,EAAD,OAEFC,SAASC,eAAe,SPkHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.a0f9938a.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import Home from \"../views/Home\";\r\nimport Contact from \"../views/Contact\";\r\nimport AboutUs from \"../views/AboutUs\";\r\n\r\nvar indexRoutes = [\r\n  { path: \"/home\", name: \"Feature\", component: Home },\r\n  { path: \"/contact\", name: \"Contact\", component: Contact },\r\n  { path: \"/about-us\", name: \"About Us\", component: AboutUs },\r\n  {\r\n    redirect: true,\r\n    path: \"/\",\r\n    pathTo: \"/home\",\r\n    name: \"Feature\"\r\n  }\r\n];\r\n\r\nexport default indexRoutes;","import React, { Component } from \"react\";\r\n\r\nclass Home extends Component {\r\n  state = {};\r\n\r\n  render() {\r\n    return <div>chung co ho</div>;\r\n  }\r\n}\r\n\r\nexport default Home;\r\n","import React, { Component } from \"react\";\r\n\r\nclass Contact extends Component {\r\n  state = {};\r\n\r\n  render() {\r\n    return <div>Contact</div>;\r\n  }\r\n}\r\n\r\nexport default Contact;\r\n","import React, { Component } from \"react\";\r\n\r\nclass AboutUs extends Component {\r\n  state = {};\r\n\r\n  render() {\r\n    return <div>About Us</div>;\r\n  }\r\n}\r\n\r\nexport default AboutUs;\r\n","import React, { Component } from \"react\";\r\nimport {\r\n  Collapse,\r\n  Navbar,\r\n  NavbarToggler,\r\n  NavbarBrand,\r\n  Nav,\r\n  NavItem\r\n} from \"reactstrap\";\r\nimport { NavLink } from \"react-router-dom\";\r\n\r\nclass Header extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.toggle = this.toggle.bind(this);\r\n    this.state = {\r\n      isOpen: false\r\n    };\r\n  }\r\n  toggle() {\r\n    this.setState({\r\n      isOpen: !this.state.isOpen\r\n    });\r\n  }\r\n  render() {\r\n    return (\r\n      <div>\r\n        <Navbar color=\"light\" light expand=\"md\">\r\n          <NavbarBrand href=\"/\">Jelly City</NavbarBrand>\r\n          <NavbarToggler onClick={this.toggle} />\r\n          <Collapse isOpen={this.state.isOpen} navbar>\r\n            <Nav className=\"ml-auto\" navbar>\r\n              <NavItem>\r\n                <NavLink className=\"nav-link\" to=\"/home\">\r\n                  Feature\r\n                </NavLink>\r\n              </NavItem>\r\n              <NavItem>\r\n                <NavLink className=\"nav-link\" to=\"/contact\">\r\n                  Contact\r\n                </NavLink>\r\n              </NavItem>\r\n              <NavItem>\r\n                <NavLink className=\"nav-link\" to=\"/about-us\">\r\n                  About Us\r\n                </NavLink>\r\n              </NavItem>\r\n            </Nav>\r\n          </Collapse>\r\n        </Navbar>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Header;\r\n","import React, { Component } from \"react\";\r\nimport { Route, Switch, Redirect } from \"react-router-dom\";\r\nimport indexRoutes from \"../routes\";\r\nimport Header from \"../components/Header\";\r\n\r\nclass LandingPage extends Component {\r\n  state = {};\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <Header />\r\n        <Switch>\r\n          {indexRoutes.map((prop, key) => {\r\n            if (prop.redirect)\r\n              return <Redirect from={prop.path} to={prop.pathTo} key={key} />;\r\n            return (\r\n              <Route path={prop.path} component={prop.component} key={key} />\r\n            );\r\n          })}\r\n        </Switch>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default LandingPage;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./assets/scss/index.scss\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\nimport { createBrowserHistory } from \"history\";\r\nimport { Router } from \"react-router-dom\";\r\nimport \"bootstrap/dist/css/bootstrap.css\";\r\nimport LandingPage from \"./layout/LandingPage\";\r\n\r\nconst hist = createBrowserHistory();\r\n\r\nReactDOM.render(\r\n  <Router history={hist}>\r\n    <LandingPage />\r\n  </Router>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}